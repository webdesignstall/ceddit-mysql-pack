generator client {
  output   = "./generated/client"
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://admin:123@localhost:3306/ceddit"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(30)
  email     String   @unique
  password  String   @db.VarChar(255)
  image     String?
  posts     Post[]
  communities Community[]
  isAdmin    Boolean  @default(false)
  postVote PostVote[]
  communitySubscriber CommunitySubscriber[]
  comment Comment[]
  CommentVote   CommentVote[]
}

model Post {
  id      Int       @id @default(autoincrement())
  title    String    @unique
  content String
  imageUrl String? @db.Text()
  commentCount Int   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User    @relation(fields: [userId], references: [id])
  userId Int
  community Community @relation(fields: [communityId], references: [id])
  communityId Int
  postVote PostVote[]
  comment Comment[]
}

model PostVote {
  id           Int      @id @default(autoincrement())
  upvote       Boolean @default(false)
  downvot  Boolean @default(false)
  post         Post     @relation(fields: [postId], references: [id])
  postId        Int
  user         User     @relation(fields: [userId], references: [id])
  userId        Int
}


model Community {
  id        Int      @id @default(autoincrement())
  admin    User      @relation(fields: [adminId], references: [id])
  adminId Int
  name      String   @unique @db.VarChar(30)
  bio       String   @db.VarChar(255)
  posts     Post[]
  communitySubscriber CommunitySubscriber[]
  subscriberCount Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunitySubscriber {
  id        Int      @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  community Community @relation(fields: [communityId], references: [id])
  communityId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content      String
  createdAt DateTime @default(now())
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  parent    Comment? @relation("ParentComment", fields: [parentId], references: [id])
  parentId  Int?
  children  Comment[] @relation("ParentComment")
  CommentVote   CommentVote[]
}

model CommentVote {
  id           Int      @id @default(autoincrement())
  comment      Comment     @relation(fields: [commentId], references: [id])
  commentId    Int
  user         User     @relation(fields: [userId], references: [id])
  userId        Int
  isUpvote      Boolean @default(false)
}


















